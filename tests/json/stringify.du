/**
 * stringify.du
 *
 * Testing the JSON.stringify() function
 *
 */
import JSON;

assert(JSON.stringify(true).unwrap() == 'true');
assert(JSON.stringify(false).unwrap() == 'false');
assert(JSON.stringify(nil).unwrap() == 'null');
assert(JSON.stringify(10).unwrap() == '10');
assert(JSON.stringify(10.5).unwrap() == '10.5');
assert(JSON.stringify("test").unwrap() == '"test"');
assert(JSON.stringify([]).unwrap() == '[]');
assert(JSON.stringify({}).unwrap() == '{}');

assert(JSON.stringify([true]).unwrap() == '[true]');
assert(JSON.stringify([false]).unwrap() == '[false]');
assert(JSON.stringify([nil]).unwrap() == '[null]');
assert(JSON.stringify([10]).unwrap() == '[10]');
assert(JSON.stringify([10.5]).unwrap() == '[10.5]');
assert(JSON.stringify(["test"]).unwrap() == '["test"]');
assert(JSON.stringify([[]]).unwrap() == '[[]]');
assert(JSON.stringify([{}]).unwrap() == '[{}]');

assert(JSON.stringify({"test": true}).unwrap() == '{"test": true}');
assert(JSON.stringify({"test": false}).unwrap() == '{"test": false}');
assert(JSON.stringify({"test": nil}).unwrap() == '{"test": null}');
assert(JSON.stringify({"test": 10}).unwrap() == '{"test": 10}');
assert(JSON.stringify({"test": 10.5}).unwrap() == '{"test": 10.5}');
assert(JSON.stringify({"test": "test"}).unwrap() == '{"test": "test"}');
assert(JSON.stringify({"test": []}).unwrap() == '{"test": []}');
assert(JSON.stringify({"test": {}}).unwrap() == '{"test": {}}');
assert(JSON.stringify({10: {}}).unwrap() == '{"10": {}}');
assert(JSON.stringify({true: false}).unwrap() == '{"true": false}');
assert(JSON.stringify({nil: 10.5}).unwrap() == '{"null": 10.5}');

assert(JSON.stringify({"test": {"test": [1, 2, 3, {"test": true}]}}).unwrap() == '{"test": {"test": [1, 2, 3, {"test": true}]}}');


class JsonTestError {
  init() {
    this.test = 0;
  }
}

var jsonError = JsonTestError();
assert(JSON.stringify(jsonError).success() == false);
assert(JSON.stringify(jsonError).unwrapError() == "Object is not serializable");

// 2 space indent
var twoSpace = '[\n' +
    '  1,\n' +
    '  2\n' +
    ']';

// 3 space indent
var threeSpace = '[\n' +
    '   1,\n' +
    '   2\n' +
    ']';

// 4 space indent
var fourSpace = '[\n' +
    '    1,\n' +
    '    2\n' +
    ']';

assert(JSON.stringify([1, 2], 2).unwrap() == twoSpace);
assert(JSON.stringify([1, 2], 3).unwrap() == threeSpace);
assert(JSON.stringify([1, 2], 4).unwrap() == fourSpace);
